# -*- coding: utf-8 -*-
"""
Created on Thu Nov  5 12:34:51 2020

@author: Derek Joslin
"""

from PyQt5 import QtWidgets as qw
from PyQt5 import QtCore as qc
from PyQt5 import QtGui as qg
import qrc_resources
import numpy as np
import NHAPI as nh

from pyqtconsole.console import PythonConsole
import pyqtconsole.highlighter as hl

#override close event
class guiConsole(PythonConsole):
    def __init__(self):
        
        super().__init__(formats={
            'keyword':    hl.format('blue', 'bold'),
            'operator':   hl.format('red'),
            'brace':      hl.format('darkGray'),
            'defclass':   hl.format('black', 'bold'),
            'string':     hl.format('magenta'),
            'string2':    hl.format('darkMagenta'),
            'comment':    hl.format('darkGreen', 'italic'),
            'self':       hl.format('black', 'italic'),
            'numbers':    hl.format('brown'),
            'inprompt':   hl.format('darkBlue', 'bold'),
            'outprompt':  hl.format('darkRed', 'bold'),
            })
        
        #add all the api functions to the gui console
        super().push_local_ns('erase', nh.erase)
        super().push_local_ns('fill', nh.fill)
        super().push_local_ns('stroke', nh.stroke)
        super().push_local_ns('direct', nh.direct)
        super().push_local_ns('dot', nh.dot)
        super().push_local_ns('line', nh.line)
        super().push_local_ns('curve', nh.curve)
        super().push_local_ns('circle', nh.circle)
        super().push_local_ns('rect', nh.rect)
        super().push_local_ns('triangle', nh.triangle)
        super().push_local_ns('polygon', nh.polygon)
        super().push_local_ns('latin', nh.latin)
        super().push_local_ns('braille', nh.braille)
        super().push_local_ns('clear', nh.clear)
        super().push_local_ns('state', nh.state)
        super().push_local_ns('desired', nh.desired)
        super().push_local_ns('refresh', nh.refresh)
        super().push_local_ns('setMat', nh.setMat)
        super().push_local_ns('quickRefresh', nh.quickRefresh)
        super().push_local_ns('times', nh.times)
        super().push_local_ns('frames', nh.frames)
        super().push_local_ns('connect', nh.connect)
        super().push_local_ns('disconnect', nh.disconnect)
        super().push_local_ns('settings', nh.settings)
            
    def closeEvent(event):
        if nh.engine.check_connection():
            nh.disconnect()
            event.accept()
        else:
            event.accept()

class displayMat(qw.QTableView):
    def __init__(self, state):
        """
        reads in a list of the current FC state. displays that state of 1s and 0s in a matrix of png images
        if val is a one, that element in the table reads in the raised image png. If the element is a zero that element reads in the
        lowered image png.
        """
        super().__init__()
        self.state = stateMat(state)
        self.setModel(self.state)
        
        
        
        
    
class stateMat(qc.QAbstractTableModel):
    def __init__(self, state):
        """
        Qt friendly container to hold the data of a state in a haptics engine
        state will be a list of lists
        """
        super().__init__()
        
        #store the list and the number of rows and columns
        self.__state = state
        newMat = np.array(state)
        dim = newMat.shape
        self.__columns = dim[0]
        self.__rows = dim[1]
        

    
    def rowCount(self, parent):
        return self.__rows
    
    def columnCount(self, parent):
        return self.__columns
   
    def data(self, index, role):
        """
        take in a list and parse the data inside the list and
        store inside the model container
        """
        return self.__state[index.column()][index.row()]
   
# =============================================================================
#     def setData(self, index, value, role):
#         """
#         sets the value of the state equal to the new state of the engine
#         """
#         self.__state = value
# =============================================================================
        
# =============================================================================
#     def flags():
#         
#     def insertRows():
#         
#     def removeRows():
#         
#     def insertColumns():
#         
#     def removeColumns():
# =============================================================================
        



#GUI object for function selection
class vizWindow(qw.QMainWindow):
    """ Window that holds all the operation functions """
    
    def __init__(self, parent = None):
        super().__init__(parent)
        self.setWindowTitle("FC Lab operation functions")
        self.resize(400, 200)
        self.centralWidget = qw.QLabel("Hello World")
        self.labelDock = qw.QDockWidget("Dialog", self, qc.Qt.Widget)
        self.labelDock.setWidget(self.centralWidget)
        
        
        #console creation
        self.console = guiConsole()
        self.console.setMaximumWidth(600)
    
        #create state views
        self.currentView = displayMat(nh.engine.get_currentState())
        self.desiredView = displayMat(nh.engine.get_desiredState())
        self.currentDock = qw.QDockWidget("current state", self, qc.Qt.Widget)
        self.currentDock.setWidget(self.currentView)
        self.desiredDock = qw.QDockWidget("desired state", self, qc.Qt.Widget)
        self.desiredDock.setWidget(self.desiredView)
        
        #align widgets
        self.setCentralWidget(self.console)
        self.addDockWidget(qc.Qt.LeftDockWidgetArea, self.desiredDock, qc.Qt.Vertical)
        self.addDockWidget(qc.Qt.LeftDockWidgetArea, self.currentDock, qc.Qt.Vertical)
        self.addDockWidget(qc.Qt.BottomDockWidgetArea, self.labelDock)
        #self.currentView.setAlignment(qc.Qt.AlignTop | qc.Qt.AlignLeft)
        #self.desiredView.setAlignment(qc.Qt.AlignBottom | qc.Qt.AlignLeft)
        
        #create the command dictionary
        self.__commandDict = {}
        
        
        
        self.__createActions()
        self.__createMenuBar()
        self.__createToolBars()
        
        

        
    def __createMenuBar(self):
        menuBar = qw.QMenuBar(self)
        self.setMenuBar(menuBar)
        #create menu bars
        #file menu
        fileMenu = qw.QMenu("&File", self)
        
        
        
        #edit menu
        editMenu = qw.QMenu("&Edit", self)
        
        #help menu
        helpMenu = qw.QMenu("&Help", self)
        
        #control menu
        controlMenu = qw.QMenu("Control",self)
        
        #board menu
        boardMenu = qw.QMenu("Board", self)
        
        #add menu bars
        menuBar.addMenu(fileMenu)
        menuBar.addMenu(editMenu)
        menuBar.addMenu(helpMenu)
        menuBar.addMenu(controlMenu)
        menuBar.addMenu(boardMenu)
        
        
    def __createToolBars(self):
        #cursor Bar
        cursors = qw.QToolBar("cursors", self)
        cursors.addAction(self.erase)
        cursors.addAction(self.fill)
        cursors.addAction(self.stroke)
        self.strokeSize = qw.QSpinBox()
        self.strokeSize.valueChanged.connect(lambda: self.centralWidget.setText("<b>Stroke size is {0}".format(self.strokeSize.value())))
        self.strokeSize.setFocusPolicy(qc.Qt.NoFocus)
        cursors.addWidget(self.strokeSize)
        cursors.setIconSize(qc.QSize(50,50))
        cursors.setMovable(False)
        #shape Bar
        shapes = qw.QToolBar("shapes", self)
        shapes.addAction(self.dot)
        shapes.addAction(self.line)
        shapes.addAction(self.curve)
        shapes.addAction(self.circle)
        shapes.addAction(self.rect)
        shapes.addAction(self.triangle)
        shapes.addAction(self.polygon)
        shapes.setIconSize(qc.QSize(50,50))
        shapes.setMovable(False)
        #character Bar
        characters = qw.QToolBar("characters", self)
        characters.addAction(self.braille)
        characters.addAction(self.latin)
        self.fontSize = qw.QSpinBox()
        self.fontSize.setFocusPolicy(qc.Qt.NoFocus)
        self.fontSize.valueChanged.connect(lambda: self.centralWidget.setText("<b>Font size is {0}".format(self.fontSize.value())))
        characters.addWidget(self.fontSize)
        characters.setIconSize(qc.QSize(50,50))
        characters.setMovable(False)
        
        #add tool bars
        self.addToolBar(qc.Qt.TopToolBarArea, cursors)
        self.addToolBar(qc.Qt.LeftToolBarArea, shapes)
        self.addToolBar(qc.Qt.BottomToolBarArea, characters)
    
    def __createActions(self):
          #create the icons for the tools
        filledIcon = qg.QIcon(":filledPin.svg")
        emptyIcon = qg.QIcon(":emptyPin.svg")
        
        #cursor tools
        self.erase = qw.QAction(filledIcon, "Erase", self)
        self.erase.triggered.connect(lambda: self.__toolSelected("erase"))
        self.fill = qw.QAction(filledIcon, "Fill", self)
        self.fill.triggered.connect(lambda: self.__toolSelected("fill"))
        self.stroke = qw.QAction(filledIcon, "Stroke", self)
        self.stroke.triggered.connect(lambda: self.__toolSelected("stroke"))
        
        #shape tools
        self.dot = qw.QAction(filledIcon, "Dot", self)
        self.dot.triggered.connect(lambda: self.__toolSelected("dot"))
        self.line = qw.QAction(filledIcon, "Line", self)
        self.line.triggered.connect(lambda: self.__toolSelected("line"))
        self.curve = qw.QAction(filledIcon, "Curve", self)
        self.curve.triggered.connect(lambda: self.__toolSelected("curve"))
        self.circle = qw.QAction(emptyIcon, "Circle", self)
        self.circle.triggered.connect(lambda: self.__toolSelected("circle"))
        self.rect = qw.QAction(emptyIcon, "Rect", self)
        self.rect.triggered.connect(lambda: self.__toolSelected("rect"))
        self.triangle = qw.QAction(emptyIcon, "Triangle", self)
        self.triangle.triggered.connect(lambda: self.__toolSelected("triangle"))
        self.polygon = qw.QAction(emptyIcon, "Polygon", self)
        self.polygon.triggered.connect(lambda: self.__toolSelected("polygon"))
        
        #character tools
        self.braille = qw.QAction(emptyIcon, "Braille", self)
        self.braille.triggered.connect(lambda: self.__toolSelected("braille"))
        self.latin = qw.QAction(emptyIcon, "Latin", self)
        self.latin.triggered.connect(lambda: self.__toolSelected("latin"))
        
        #control tools
        self.clear = qw.QAction(emptyIcon, "Clear", self)
        self.clear.triggered.connect(lambda: self.__toolSelected("clear"))
    
    def __spinboxUpdated(self, param, value):
        self.__commandDict[param] = value
        self.centralWidget.setText("<b>{0} is {1}".format(param,value))
        self.consoleFill()
    
    
    def __toolSelected(self, tool):
        self.__commandDict["command"] = tool
        self.centralWidget.setText("<b>{command} selected".format(**self.__commandDict))
        self.consoleFill()
        
    def consoleFill(self):
        self.console.clear_input_buffer()
        commandStr = "{command}({stroke size})".format(**self.__commandDict)
        self.console.insert_input_text(commandStr)
        
        
    
    def executeTool(self, statusStr):
        #self.desiredView.state.layoutAboutToBeChanged.emit()
        #self.currentView.state.layoutAboutToBeChanged.emit()
        self.console.clear_input_buffer()
        self.console.insert_input_text(self.__commandStr)
        self.console.process_input(self.console.input_buffer())
        self.centralWidget.setText(statusStr)
        self.__updateDocks()
    
    def __updateDocks(self):
        self.desiredView.state.layoutChanged.emit()
        self.currentView.state.layoutChanged.emit()
        #self.desiredView.update()
        #self.currentView.update()
# =============================================================================
#         self.currentDock.show()
#         self.desiredDock.show()
#         self.labelDock.show()
# =============================================================================
