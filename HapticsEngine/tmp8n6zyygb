# -*- coding: utf-8 -*-
"""
Created on Fri Aug  7 10:18:00 2020

@author: Derek Joslin
"""

""" this class performs operations on a matrix and changes the values inside """

import numpy as np
import cairo as ca
import copy



class GraphicsEngine:
    
    def __init__(self,matrix):
        #create the graphics
        self.__data = np.array(matrix)
        self.__data[self.__data == 1] = 255
        dim = self.__data.shape
        self.state = matrix
        surface = ca.ImageSurface.create_for_data(self.__data, ca.FORMAT_A8, dim[0], dim[1])
        self.__ct = ca.Context(surface)
    
# =============================================================================
#     def read_matrix(self, matrix):
#         dim = matrix.shape
#         self.__data = copy.deepcopy(matrix)
#         self.__data[self.__data == 1] = 255
#         self.matrix = matrix
#         surface = ca.ImageSurface.create_for_data(self.__data, ca.FORMAT_A8, dim[0], dim[1])
#         self.__ct = ca.Context(surface)
# =============================================================================
        
    #def fill_matrix(startMatrix):
        """ takes in a matrix to edit and returns edited matrix """
        
        
    #def display_matrix(self):
        

    #def make_circle():
    
    
    def make_line(self, start, end, width):
        """ takes in two tuples that represent coordinates of the 
        start and end locations of the line """
        #use offset if width is odd
        if (width % 2) == 0:
            offset = 0
        else:
            offset = 0.5
                
        #add .5 to the start and end
        startX = start[0] + offset
        startY = start[1] + offset
        endX = end[0] + offset
        endY = end[1] + offset
        self.__ct.move_to(startX,startY)
        self.__ct.line_to(endX,endY)
        self.__ct.set_line_width(width)
        self.__ct.set_source_rgba(1.0, 1.0, 1.0, 1.0)
        self.__ct.stroke()
        self.__save_data()
        
        
    def __save_data(self):
        self.__data[self.__data > 110] = 255
        self.__data[self.__data != 255] = 0
        self.state.clear()
        self.state.insert((self.__data == 255).tolist())
        
        
        
        
        
        
data = np.zeros((20,20), dtype=np.uint8)
data = data.tolist()
ge = GraphicsEngine(data)
ge.make_line((5,0),(19,5), 2)
# write output
print('---------------------------\n\r')
print('\n'.join([' '.join(['{:4}'.format(item) for item in row])
         for row in data]))
